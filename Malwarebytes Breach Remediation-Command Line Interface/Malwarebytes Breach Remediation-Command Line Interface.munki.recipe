<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>Downloads latest version of Malwarebytes Breach Remediation-Command Line Interface PKG, and imports into Munki.</string>
    <key>Identifier</key>
    <string>com.github.dataJAR-recipes.munki.Malwarebytes Breach Remediation-Command Line Interface</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>Malwarebytes Breach Remediation-Command Line Interface</string>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps/%NAME%</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>Malwarebytes Breach Remediation is designed to allow business users to detect and remove malware from endpoints. It is built upon the power of our Malwarebytes Anti-Malware anti-malware client.

Implementation in a portable form provides increased flexibility for IT staff to quickly and easily deploy the client, detect and remediate threats, gather activity logs, and continue with their daily tasks â€“ all with a minimal investment in time and resources.</string>
            <key>developer</key>
            <string>Malwarebytes</string>
            <key>display_name</key>
            <string>Malwarebytes Breach Remediation</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>uninstall_method</key>
            <string>uninstall_script</string>
            <key>uninstall_script</key>
            <string>#!/bin/sh
# This Uninstall Script has been taken unedited from "/Library/Application Support/Malwarebytes/MBBR/Engine.bundle/Contents/Resources/Remove_Malwarebytes.pkg"

# During uninstall we try to do our best. If something fails then we just continue.
# &apos;+e&apos; - allow script execution with non-zero exit status.
set +e

## ----------------------------------------
##              Variables
## ----------------------------------------

MB_PRODUCT_IDENTIFIER=&quot;mbbr&quot;
MB_PRODUCT_IDENTIFIER__UPPERCASE=&quot;MBBR&quot;
MB_PRODUCT_DOMAIN=&quot;com.malwarebytes.${MB_PRODUCT_IDENTIFIER}&quot;
MB_PRODUCT_DOMAIN_SHORT=&quot;MB_${MB_PRODUCT_IDENTIFIER__UPPERCASE}&quot;
MB_PRODUCT_INSTALLER=&quot;${MB_PRODUCT_DOMAIN}.installer&quot;

APP_SUPPORT_MB=&quot;/Library/Application Support/Malwarebytes&quot;
SILO_PATH=&quot;${APP_SUPPORT_MB}/${MB_PRODUCT_IDENTIFIER__UPPERCASE}&quot;
LOGS_NAME=&quot;Logs&quot;
LOGS_PATH=&quot;${SILO_PATH}/${LOGS_NAME}&quot;

AGENT_PLIST_SRC=&quot;/Library/LaunchAgents/${MB_PRODUCT_DOMAIN}.frontend.agent.plist&quot;

RTP_DAEMON_JOB_NAME=&quot;${MB_PRODUCT_DOMAIN}.rtprotection.daemon&quot;
RTP_DAEMON_PLIST_SRC=&quot;/Library/LaunchDaemons/${RTP_DAEMON_JOB_NAME}.plist&quot;

SK_DAEMON_JOB_NAME=&quot;${MB_PRODUCT_DOMAIN}.settings.daemon&quot;
SK_DAEMON_PLIST_SRC=&quot;/Library/LaunchDaemons/${SK_DAEMON_JOB_NAME}.plist&quot;

MB_PRODUCT_TOOL_NAME=&quot;${MB_PRODUCT_DOMAIN}.tool&quot;
MB_PRODUCT_TOOL_SRC=&quot;/usr/local/bin/${MB_PRODUCT_TOOL_NAME}&quot;

GUEST_UID=201
LAST_SYSTEM_RESERVED_UID=499

## ----------------------------------------
##          Helper Functions
## ----------------------------------------

stop_agents_and_daemons_function()
{
    # Agents

    echo &quot;Agent unload for All active users from &apos;${AGENT_PLIST_SRC}&apos;...&quot;
    for uid in $(ps -axo uid,args | grep -i &quot;[l]oginwindow.app&quot; | awk &apos;{print $1}&apos;); do
        uid=$(echo $uid | cut -d, -f1)

        if [[ $uid -gt ${LAST_SYSTEM_RESERVED_UID} || $uid -eq ${GUEST_UID} ]]; then
            echo &quot;    UID: $uid&quot;
            launchctl bootout gui/&quot;$uid&quot; &quot;${AGENT_PLIST_SRC}&quot;
        fi
    done
    echo &quot;Agent unloading has been finished.&quot;

     # RTP Daemon

    echo &quot;Stopping &apos;${RTP_DAEMON_JOB_NAME}&apos; RTP daemon...&quot;
    launchctl unload &quot;${RTP_DAEMON_PLIST_SRC}&quot;

    # SK Daemon

    echo &quot;Stopping &apos;${SK_DAEMON_JOB_NAME}&apos; SK daemon...&quot;
    launchctl unload &quot;${SK_DAEMON_PLIST_SRC}&quot;
}

forget_product_package_function()
{
    echo &quot;Forgetting product package records...&quot;
    pkgutil --forget &quot;${MB_PRODUCT_INSTALLER}&quot; &amp;&amp; echo &quot;&apos;${MB_PRODUCT_INSTALLER}&apos; package got forgotten.&quot; || true
}

remove_product_files_function()
{
    echo &quot;Removing files...&quot;

    # We must not change ownership and permissions of files residing in &apos;&lt;SILO&gt;/Logs&apos; directory.
    # That is why we use &apos;rm -rf&apos;. See MMAC-1459 for details.
    find &quot;${SILO_PATH}&quot; -d 1 -type d \! -name &quot;${LOGS_NAME}&quot; | \
    while read dir; do
        remove_folder_function &quot;$dir&quot;;
    done
    rm -rf &quot;${LOGS_PATH}&quot; || true
    rm -rf &quot;${SILO_PATH}&quot; || true

    remove_file_function &quot;${AGENT_PLIST_SRC}&quot;
    remove_file_function &quot;${RTP_DAEMON_PLIST_SRC}&quot;
    remove_file_function &quot;${SK_DAEMON_PLIST_SRC}&quot;
    remove_file_function &quot;${MB_PRODUCT_TOOL_SRC}&quot;

    forget_product_package_function

    # Removing only in case it&apos;s empty.
    rmdir &quot;${APP_SUPPORT_MB}&quot; || true

    remove_launchd_run_counters_function || true
}

# Changes the owner of the file to the needed one and deletes it.
remove_file_function()
{
    # Below we append &apos;|| true&apos; to NOT fail whole script in case of rm/chmod/chown failure which is ok.

    chown 0:0 &quot;$1&quot; || true
    chmod 600 &quot;$1&quot; || true
    rm -f &quot;$1&quot; || true
}

# Changes the owner of the folder to the needed one and deletes it.
remove_folder_function()
{
    # Below we append &apos;|| true&apos; to NOT fail whole script in case of rm/chmod/chown failure which is ok.

    chown -R 0:0 &quot;$1&quot; || true
    chmod -R 600 &quot;$1&quot; || true
    rm -rf &quot;$1&quot; || true
}

get_user_home_folder_function() {

    dscl . read &quot;/Users/$1&quot; NFSHomeDirectory 2&gt;/dev/null | awk &apos;/^NFSHomeDirectory:/ {print $2}&apos; 2&gt;/dev/null || true
}

# Removes launchd run counter file(s) from user&apos;s home directory.
remove_launchd_run_counters_function() {

    echo &quot;Removing launchd associated files...&quot;

    # Read list of users.
    dscl . list /Users 2&gt;/dev/null | egrep -v &apos;(^_|^nobody$|^daemon$)&apos; | \
    while read user; do

        user_home=$(get_user_home_folder_function &quot;${user}&quot;)
        [ -n &quot;$user_home&quot; ] || continue

        app_support_domain_path=&quot;${user_home}/Library/Application Support/${MB_PRODUCT_DOMAIN}&quot;
        [ -d &quot;${app_support_domain_path}&quot; ] || continue

        find &quot;${app_support_domain_path}&quot; -type f -name &quot;${MB_PRODUCT_DOMAIN}.*&quot; | \
        while read path; do
            rm -f &quot;$path&quot; || true
        done

        # Removing only in case it&apos;s empty.
        rmdir &quot;${app_support_domain_path}&quot; || true
    done
}

# Removes Malwarebytes users.
remove_malwarebytes_users()
{
    echo &quot;Removing Malwarebytes users...&quot;

    dscl &quot;/Local/Default&quot; -delete &quot;/Users/${MB_PRODUCT_DOMAIN}.nobody&quot; || true
}

# Changing the owner and access rights of the key folders in case they were changed to incorrect previously.
check_owner_of_key_elements()
{
    echo &quot;Checking ownership of key resources...&quot;

    # Below we append &apos;|| true&apos; to NOT fail whole script in case of chmod/chown failure which is ok.

    chown 0:0 &quot;${APP_SUPPORT_MB}&quot; || true
    chmod 755 &quot;${APP_SUPPORT_MB}&quot; || true

    chown 0:0 &quot;${SILO_PATH}&quot; || true
    chmod 755 &quot;${SILO_PATH}&quot; || true
}

## ----------------------------------------
##              Main
## ----------------------------------------

echo &quot;Current user: $(whoami) ($(id -u))&quot;

check_owner_of_key_elements
stop_agents_and_daemons_function || true

remove_malwarebytes_users
remove_product_files_function</string>
            <key>unattended_install</key>
            <true/>
            <key>unattended_uninstall</key>
            <true/>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>1.1</string>
    <key>ParentRecipe</key>
    <string>com.github.dataJAR-recipes.download.Malwarebytes Breach Remediation-Command Line Interface</string>
    <key>Process</key>
    <array>
        <dict>
            <key>Processor</key>
            <string>FlatPkgUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>flat_pkg_path</key>
                <string>%pathname%</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/</string>
            </dict>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/payload</string>
                <key>pkg_payload_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/MBBR.pkg/Payload</string>
                <key>purge_destination</key>
                <true/>
            </dict>
            <key>Processor</key>
            <string>PkgPayloadUnpacker</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>input_plist_path</key>
                <string>%RECIPE_CACHE_DIR%/payload/Library/Application Support/Malwarebytes/MBBR/Engine.bundle/Contents/Info.plist</string>
                <key>plist_version_key</key>
                <string>CFBundleVersion</string>
            </dict>
            <key>Processor</key>
            <string>Versioner</string>
        </dict>
        <dict>
             <key>Arguments</key>
             <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>version</key>
                    <string>%version%</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
         <dict>
            <key>Arguments</key>
            <dict>
                <key>info_path</key>
                <string>%RECIPE_CACHE_DIR%/payload/Library/Application Support/Malwarebytes/MBBR/Engine.bundle/Contents/Info.plist</string>
                <key>plist_keys</key>
                <dict>
                    <key>LSMinimumSystemVersion</key>
                    <string>min_os_ver</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>PlistReader</string>
        </dict>
        <dict>
             <key>Arguments</key>
             <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>minimum_os_version</key>
                    <string>%min_os_ver%</string>
                </dict>
            </dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>faux_root</key>
                <string>%RECIPE_CACHE_DIR%/payload</string>
                <key>installs_item_paths</key>
                <array>
                    <string>/Library/Application Support/Malwarebytes/MBBR/Engine.bundle</string>
                </array>
            </dict>
            <key>Processor</key>
            <string>MunkiInstallsItemsCreator</string>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%pathname%</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
                <key>version_comparison_key</key>
                <string>CFBundleVersion</string>
                <key>munkiimport_pkgname</key>
                <string>%NAME%-%version%.pkg</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PathDeleter</string>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                    <string>%RECIPE_CACHE_DIR%/payload/</string>
                    <string>%RECIPE_CACHE_DIR%/unpack/</string>
                </array>
            </dict>
        </dict>
    </array>
</dict>
</plist>
